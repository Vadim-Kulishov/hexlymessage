{"version":3,"sources":["hooks/useChat.js","hooks/useLocalStorage.js","hooks/useBeforeUnload.js","components/ChatRoom/MessageList/MessageListItem.js","components/ChatRoom/MessageList/MessageList.js","components/ChatRoom/MessageForm/MessageForm.js","components/ChatRoom/UserList/UserList.js","App.js","components/Home/Home.js","components/ChatRoom/ChatRoom.js","index.js"],"names":["useLocalStorage","key","initialValue","value","setValue","useState","item","window","localStorage","getItem","JSON","parse","useEffect","stringify","setItem","useBeforeUnload","handleBeforeunload","e","returnValue","preventDefault","addEventListener","removeEventListener","MessageListItem","_ref","msg","removeMessage","messageId","messageText","senderName","createdAt","currentUser","_jsx","ListGroup","Item","className","concat","children","_jsxs","Card","bg","text","style","width","Header","Text","as","TimeAgo","date","Body","Button","variant","onClick","AiOutlineDelete","listStyles","height","border","borderRadius","overflow","MessageList","messages","messagesEndRef","useRef","_messagesEndRef$curre","current","scrollIntoView","behavior","_Fragment","map","ref","MessageForm","username","sendMessage","setText","showEmoji","setShowEmoji","Form","onSubmit","trim","Group","type","handleEmojiShow","v","GrEmoji","Control","onChange","target","placeholder","FiSend","Picker","onSelect","native","emojiSize","UserList","users","usersArr","Object","entries","activeUsers","values","filter","u","online","length","Accordion","Toggle","eventKey","textDecoration","Badge","_ref2","userId","obj","Collapse","RiRadioButtonLine","size","routes","path","name","Component","setUsername","roomId","setRoomId","linkRef","trimmed","maxWidth","margin","click","Label","disabled","Link","to","ChatRoom","useParams","setUsers","setMessages","nanoid","socketRef","io","query","emit","on","newMessages","disconnect","id","useChat","App","Router","Container","Switch","Route","exact","GlobalStyles","createGlobalStyle","_templateObject","_taggedTemplateLiteral","root","document","getElementById","render"],"mappings":"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","file":"static/js/main.40064153.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react'\n// получаем класс IO\nimport io from 'socket.io-client'\nimport { nanoid } from 'nanoid'\n// наши хуки\nimport { useLocalStorage, useBeforeUnload } from 'hooks'\n\n// адрес сервера\n// требуется перенаправление запросов - смотрите ниже\nconst SERVER_URL = 'http://localhost:5000'\n\n// хук принимает название комнаты\nexport const useChat = (roomId) => {\n  // локальное состояние для пользователей\n  const [users, setUsers] = useState([])\n  // локальное состояние для сообщений\n  const [messages, setMessages] = useState([])\n\n  // создаем и записываем в локальное хранинище идентификатор пользователя\n  const [userId] = useLocalStorage('userId', nanoid(8))\n  // получаем из локального хранилища имя пользователя\n  const [username] = useLocalStorage('username')\n\n  // useRef() используется не только для получения доступа к DOM-элементам,\n  // но и для хранения любых мутирующих значений в течение всего жизненного цикла компонента\n  const socketRef = useRef(null)\n\n  useEffect(() => {\n    // создаем экземпляр сокета, передаем ему адрес сервера\n    // и записываем объект с названием комнаты в строку запроса \"рукопожатия\"\n    // socket.handshake.query.roomId\n    socketRef.current = io(SERVER_URL, {\n      query: { roomId }\n    })\n\n    // отправляем событие добавления пользователя,\n    // в качестве данных передаем объект с именем и id пользователя\n    socketRef.current.emit('user:add', { username, userId })\n\n    // обрабатываем получение списка пользователей\n    socketRef.current.on('users', (users) => {\n      // обновляем массив пользователей\n      setUsers(users)\n    })\n\n    // отправляем запрос на получение сообщений\n    socketRef.current.emit('message:get')\n\n    // обрабатываем получение сообщений\n    socketRef.current.on('messages', (messages) => {\n      // определяем, какие сообщения были отправлены данным пользователем,\n      // если значение свойства \"userId\" объекта сообщения совпадает с id пользователя,\n      // то добавляем в объект сообщения свойство \"currentUser\" со значением \"true\",\n      // иначе, просто возвращаем объект сообщения\n      const newMessages = messages.map((msg) =>\n        msg.userId === userId ? { ...msg, currentUser: true } : msg\n      )\n      // обновляем массив сообщений\n      setMessages(newMessages)\n    })\n\n    return () => {\n      // при размонтировании компонента выполняем отключение сокета\n      socketRef.current.disconnect()\n    }\n  }, [roomId, userId, username])\n\n  // функция отправки сообщения\n  // принимает объект с текстом сообщения и именем отправителя\n  const sendMessage = ({ messageText, senderName }) => {\n    // добавляем в объект id пользователя при отправке на сервер\n    socketRef.current.emit('message:add', {\n      userId,\n      messageText,\n      senderName\n    })\n  }\n\n  // функция удаления сообщения по id\n  const removeMessage = (id) => {\n    socketRef.current.emit('message:remove', id)\n  }\n\n  // отправляем на сервер событие \"user:leave\" перед перезагрузкой страницы\n  useBeforeUnload(() => {\n    socketRef.current.emit('user:leave', userId)\n  })\n\n  // хук возвращает пользователей, сообщения и функции для отправки удаления сообщений\n  return { users, messages, sendMessage, removeMessage }\n}","import { useState, useEffect } from 'react'\n\nexport const useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    const item = window.localStorage.getItem(key)\n    return item ? JSON.parse(item) : initialValue\n  })\n\n  useEffect(() => {\n    const item = JSON.stringify(value)\n    window.localStorage.setItem(key, item)\n    // отключаем линтер, чтобы не получать предупреждений об отсутствии зависимости key, от которой useEffect, на самом деле, не зависит\n    // здесь мы немного обманываем useEffect\n    // eslint-disable-next-line\n  }, [value])\n\n  return [value, setValue]\n}","import { useEffect } from 'react'\n\nexport const useBeforeUnload = (value) => {\n  const handleBeforeunload = (e) => {\n    let returnValue\n    if (typeof value === 'function') {\n      returnValue = value(e)\n    } else {\n      returnValue = value\n    }\n    if (returnValue) {\n      e.preventDefault()\n      e.returnValue = returnValue\n    }\n    return returnValue\n  }\n\n  useEffect(() => {\n    window.addEventListener('beforeunload', handleBeforeunload)\n    return () => window.removeEventListener('beforeunload', handleBeforeunload)\n    // eslint-disable-next-line\n  }, [])\n}","// форматирование даты и времени\nimport TimeAgo from 'react-timeago'\n// стили\nimport { ListGroup, Card, Button } from 'react-bootstrap'\n// иконки\nimport { AiOutlineDelete } from 'react-icons/ai'\n\n// функция принимает объект сообщения и функцию для удаления сообщений\nexport const MessageListItem = ({ msg, removeMessage }) => {\n  // обрабатываем удаление сообщений\n  const handleRemoveMessage = (id) => {\n    removeMessage(id)\n  }\n\n  const { messageId, messageText, senderName, createdAt, currentUser } = msg\n  return (\n    <ListGroup.Item\n      className={`d-flex ${currentUser ? 'justify-content-end' : ''}`}\n    >\n      <Card\n        bg={`${currentUser ? 'primary' : 'secondary'}`}\n        text='light'\n        style={{ width: '55%' }}\n      >\n        <Card.Header className='d-flex justify-content-between align-items-center'>\n          {/* передаем TimeAgo дату создания сообщения */}\n          <Card.Text as={TimeAgo} date={createdAt} className='small' />\n          <Card.Text>{senderName}</Card.Text>\n        </Card.Header>\n        <Card.Body className='d-flex justify-content-between align-items-center'>\n          <Card.Text>{messageText}</Card.Text>\n          {/* удалять сообщения может только отправивший их пользователь */}\n          {currentUser && (\n            <Button\n              variant='none'\n              className='text-warning'\n              onClick={() => handleRemoveMessage(messageId)}\n            >\n              <AiOutlineDelete />\n            </Button>\n          )}\n        </Card.Body>\n      </Card>\n    </ListGroup.Item>\n  )\n}","import { useRef, useEffect } from 'react'\n// стили\nimport { ListGroup } from 'react-bootstrap'\n// компонент\nimport { MessageListItem } from './MessageListItem'\n\n// пример встроенных стилей (inline styles)\nconst listStyles = {\n  height: '80vh',\n  border: '1px solid rgba(0,0,0,.4)',\n  borderRadius: '4px',\n  overflow: 'auto'\n}\n\n// функция принимает массив сообщений и функцию для удаления сообщений\n// функция для удаления сообщений в виде пропа передается компоненту \"MessageListItem\"\nexport const MessageList = ({ messages, removeMessage }) => {\n  // данный \"якорь\" нужен для выполнения прокрутки при добавлении в список нового сообщения\n  const messagesEndRef = useRef(null)\n\n  // плавная прокрутка, выполняемая при изменении массива сообщений\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({\n      behavior: 'smooth'\n    })\n  }, [messages])\n\n  return (\n    <>\n      <ListGroup variant='flush' style={listStyles}>\n        {messages.map((msg) => (\n          <MessageListItem\n            key={msg.messageId}\n            msg={msg}\n            removeMessage={removeMessage}\n          />\n        ))}\n        <span ref={messagesEndRef}></span>\n      </ListGroup>\n    </>\n  )\n}","import { useState } from 'react'\n// стили\nimport { Form, Button } from 'react-bootstrap'\n// эмодзи\nimport { Picker } from 'emoji-mart'\n// иконки\nimport { FiSend } from 'react-icons/fi'\nimport { GrEmoji } from 'react-icons/gr'\n\n// функция принимает имя пользователя и функция отправки сообщений\nexport const MessageForm = ({ username, sendMessage }) => {\n  // локальное состояние для текста сообщения\n  const [text, setText] = useState('')\n  // индикатор отображения эмодзи\n  const [showEmoji, setShowEmoji] = useState(false)\n\n  // обрабатываем изменение текста\n  const handleChangeText = (e) => {\n    setText(e.target.value)\n  }\n\n  // обрабатываем показ/скрытие эмодзи\n  const handleEmojiShow = () => {\n    setShowEmoji((v) => !v)\n  }\n\n  // обрабатываем выбор эмодзи\n  // добавляем его к тексту, используя предыдущее значение состояния текста\n  const handleEmojiSelect = (e) => {\n    setText((text) => (text += e.native))\n  }\n\n  // обрабатываем отправку сообщения\n  const handleSendMessage = (e) => {\n    e.preventDefault()\n    const trimmed = text.trim()\n    if (trimmed) {\n      sendMessage({ messageText: text, senderName: username })\n      setText('')\n    }\n  }\n\n  return (\n    <>\n      <Form onSubmit={handleSendMessage}>\n        <Form.Group className='d-flex'>\n          <Button variant='primary' type='button' onClick={handleEmojiShow}>\n            <GrEmoji />\n          </Button>\n          <Form.Control\n            value={text}\n            onChange={handleChangeText}\n            type='text'\n            placeholder='Напишите сообщение...'\n          />\n          <Button variant='success' type='submit'>\n            <FiSend />\n          </Button>\n        </Form.Group>\n      </Form>\n      {/* эмодзи */}\n      {showEmoji && <Picker onSelect={handleEmojiSelect} emojiSize={20} />}\n    </>\n  )\n}","// стили\nimport { Accordion, Card, Button, Badge } from 'react-bootstrap'\n// иконка - индикатор статуса пользователя\nimport { RiRadioButtonLine } from 'react-icons/ri'\n\n// компонент принимает объект с пользователями - нормализованную структуру\nexport const UserList = ({ users }) => {\n  // преобразуем структуру в массив\n  const usersArr = Object.entries(users)\n  // получаем массив вида (массив подмассивов)\n  // [ ['1', { username: 'Alice', online: false }], ['2', {username: 'Bob', online: false}] ]\n\n  // количество активных пользователей\n  const activeUsers = Object.values(users)\n    // получаем массив вида\n    // [ {username: 'Alice', online: false}, {username: 'Bob', online: false} ]\n    .filter((u) => u.online).length\n\n  return (\n    <Accordion className='mt-4'>\n      <Card>\n        <Card.Header bg='none'>\n          <Accordion.Toggle\n            as={Button}\n            variant='info'\n            eventKey='0'\n            style={{ textDecoration: 'none' }}\n          >\n            Активные пользователи{' '}\n            <Badge variant='light' className='ml-1'>\n              {activeUsers}\n            </Badge>\n          </Accordion.Toggle>\n        </Card.Header>\n        {usersArr.map(([userId, obj]) => (\n          <Accordion.Collapse eventKey='0' key={userId}>\n            <Card.Body>\n              <RiRadioButtonLine\n                className={`mb-1 ${\n                  obj.online ? 'text-success' : 'text-secondary'\n                }`}\n                size='0.8em'\n              />{' '}\n              {obj.username}\n            </Card.Body>\n          </Accordion.Collapse>\n        ))}\n      </Card>\n    </Accordion>\n  )\n}","// средства маршрутизации\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n// стили\nimport { Container } from 'react-bootstrap'\n// компоненты\nimport { Home, ChatRoom } from 'components'\n\n// маршруты\nconst routes = [\n  { path: '/', name: 'Home', Component: Home },\n  { path: '/:roomId', name: 'ChatRoom', Component: ChatRoom }\n]\n\nexport const App = () => (\n  <Router>\n    <Container style={{ maxWidth: '512px' }}>\n      <h1 className='mt-2 text-center'>Message Hexlet</h1>\n      <Switch>\n        {routes.map(({ path, Component }) => (\n          <Route key={path} path={path} exact>\n            <Component />\n          </Route>\n        ))}\n      </Switch>\n    </Container>\n  </Router>\n)","import { useState, useRef } from 'react'\n// для маршрутизации используется react-router-dom\nimport { Link } from 'react-router-dom'\n// наш хук\nimport { useLocalStorage } from 'hooks'\n// для стилизации используется react-bootstrap\nimport { Form, Button } from 'react-bootstrap'\n\nexport function Home() {\n  // создаем и записываем в локальное хранилище имя пользователя\n  // или извлекаем его из хранилища\n  const [username, setUsername] = useLocalStorage('username', 'John')\n  // локальное состояние для комнаты\n  const [roomId, setRoomId] = useState('free')\n  const linkRef = useRef(null)\n\n  // обрабатываем изменение имени пользователя\n  const handleChangeName = (e) => {\n    setUsername(e.target.value)\n  }\n\n  // обрабатываем изменение комнаты\n  const handleChangeRoom = (e) => {\n    setRoomId(e.target.value)\n  }\n\n  // имитируем отправку формы\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    // выполняем нажатие кнопки\n    linkRef.current.click()\n  }\n\n  const trimmed = username.trim()\n\n  return (\n    <Form\n      className='mt-5'\n      style={{ maxWidth: '320px', margin: '0 auto' }}\n      onSubmit={handleSubmit}\n    >\n      <Form.Group>\n        <Form.Label>Name:</Form.Label>\n        <Form.Control value={username} onChange={handleChangeName} />\n      </Form.Group>\n      <Form.Group>\n        <Form.Label>Room:</Form.Label>\n        <Form.Control as='select' value={roomId} onChange={handleChangeRoom}>\n          <option value='free'>Free</option>\n          <option value='job' disabled>\n            Job\n          </option>\n        </Form.Control>\n      </Form.Group>\n      {trimmed && (\n        <Button variant='success' as={Link} to={`/${roomId}`} ref={linkRef}>\n          Chat\n        </Button>\n      )}\n    </Form>\n  )\n}","import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n// компоненты\nimport { MessageList } from './MessageList/MessageList';\nimport { MessageForm } from './MessageForm/MessageForm';\nimport { UserList } from './UserList/UserList';\n// пользовательский хук для работы с чатом\nimport { useChat } from 'hooks';\n\nexport const ChatRoom = () => {\n  // получаем параметр roomId из URL\n  const { roomId } = useParams();\n  // использование пользовательского хука useChat для управления чатом\n  const { users, messages, sendMessage, removeMessage } = useChat(roomId);\n\n  // обработка события \"user:leave\" при выходе из комнаты\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line\n      sendMessage({ messageText: '', senderName: '' });\n    };\n  }, []);\n  return (\n    <div className=\"mt-4\">\n      <div className=\"row\">\n        <div className=\"col-md-8\">\n          <MessageList messages={messages} removeMessage={removeMessage} />\n          <MessageForm username='user' sendMessage={sendMessage} />\n        </div>\n        <div className=\"col-md-4\">\n          <UserList users={users} />\n        </div>\n      </div>\n    </div>\n  );\n};","import React from 'react'\nimport { render } from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\n// стили\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'emoji-mart/css/emoji-mart.css'\n// компонент\nimport { App } from './App'\n// небольшая корректировка \"бутстраповских\" стилей\nconst GlobalStyles = createGlobalStyle`\n.card-header {\n  padding: 0.25em 0.5em;\n}\n.card-body {\n  padding: 0.25em 0.5em;\n}\n.card-text {\n  margin: 0;\n}\n`\n\nconst root = document.getElementById('root')\nrender(\n  <>\n    <GlobalStyles />\n    <App />\n  </>,\n  root\n)"],"sourceRoot":""}